name: Migrate environments

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Get deployment environments from source repo
        id: get-envs
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.repos.getAllEnvironments({
              owner: 'liatrio-enterprise',
              repo: 'environment-migration-test',
            });
            console.log(response.data);

            for (const env of response.data.environments) {
              console.log(env.name);
              console.log(env.protection_rules);
              console.log(env.deployment_branch_policy);
            }

            return response.data;
      
      - name: Create PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            console.log(JSON.stringify(${{ steps.get-envs.outputs.result }}));

            const response = ${{ steps.get-envs.outputs.result }};

            for (const env of response.environments) {
              // console.log(env.name);
              // console.log(env.protection_rules);
              // console.log(env.deployment_branch_policy);

              if (env.deployment_branch_policy === null){ // No deployment branch policy
                github.rest.repos.createOrUpdateEnvironment({
                  owner: 'liatrio-enterprise',
                  repo: 'calvin-test',
                  environment_name: env.name,
                  deployment_branch_policy: null
                })
              } else {
                let rule_wait_timer = false
                let rule_prevent_self_review = false
                let rule_reviewers = []
                for (const rule of response.protection_rules){
                  if (env.protection_rules.wait_timer != null){
                    rule_wait_timer = true
                  } else if (env.protection_rules.prevent_self_review != null){
                    rule_prevent_self_review = true
                  } else if (env.protection_rules.reviewers != null){
                    rule_reviewers = env.protection_rules.reviewers
                  }
                }
                if (rule_wait_timer === true && rule_prevent_self_review === true && rule_reviewers.length > 0){ // required reviewers and prevent self review, wait timer (all rules)
                  github.rest.repos.createOrUpdateEnvironment({
                    owner: 'liatrio-enterprise',
                    repo: 'calvin-test',
                    environment_name: env.name,
                    wait_timer: env.protection_rules.wait_timer,
                    prevent_self_review: env.protection_rules.prevent_self_review,
                    reviewers: env.protection_rules.reviewers,
                    deployment_branch_policy: {
                      protected_branches: env.deployment_branch_policy.protected_branches,
                      custom_branch_policies: env.deployment_branch_policy.custom_branch_policies,
                    }
                  })
                } else if (rule_wait_timer === true && rule_prevent_self_review === false && rule_reviewers.length > 0){ // required reviewers, no prevent self review, wait timer
                  github.rest.repos.createOrUpdateEnvironment({
                    owner: 'liatrio-enterprise',
                    repo: 'calvin-test',
                    environment_name: env.name,
                    wait_timer: env.protection_rules.wait_timer,
                    reviewers: env.protection_rules.reviewers,
                    deployment_branch_policy: {
                      protected_branches: env.deployment_branch_policy.protected_branches,
                      custom_branch_policies: env.deployment_branch_policy.custom_branch_policies,
                    }
                  })
                } else if (rule_wait_timer === false && rule_prevent_self_review === true && rule_reviewers.length > 0){ // required reviewers and prevent self review, no wait timer
                  github.rest.repos.createOrUpdateEnvironment({
                    owner: 'liatrio-enterprise',
                    repo: 'calvin-test',
                    environment_name: env.name,
                    prevent_self_review: env.protection_rules.prevent_self_review,
                    reviewers: env.protection_rules.reviewers,
                    deployment_branch_policy: {
                      protected_branches: env.deployment_branch_policy.protected_branches,
                      custom_branch_policies: env.deployment_branch_policy.custom_branch_policies,
                    }
                  })
                } else if (rule_wait_timer === false && rule_prevent_self_review === false && rule_reviewers.length > 0){ // required reviewers, no prevent self review, no wait timer
                  github.rest.repos.createOrUpdateEnvironment({
                    owner: 'liatrio-enterprise',
                    repo: 'calvin-test',
                    environment_name: env.name,
                    reviewers: env.protection_rules.reviewers,
                    deployment_branch_policy: {
                      protected_branches: env.deployment_branch_policy.protected_branches,
                      custom_branch_policies: env.deployment_branch_policy.custom_branch_policies,
                    }
                  })
                } else if (rule_wait_timer === true && rule_prevent_self_review === false && rule_reviewers.length === 0){ // wait timer only
                  github.rest.repos.createOrUpdateEnvironment({
                    owner: 'liatrio-enterprise',
                    repo: 'calvin-test',
                    environment_name: env.name,
                    wait_timer: env.protection_rules.wait_timer,
                    deployment_branch_policy: {
                      protected_branches: env.deployment_branch_policy.protected_branches,
                      custom_branch_policies: env.deployment_branch_policy.custom_branch_policies,
                    }
                  })
                } else { // no rules
                  github.rest.repos.createOrUpdateEnvironment({
                    owner: 'liatrio-enterprise',
                    repo: 'calvin-test',
                    environment_name: env.name,
                    deployment_branch_policy: {
                      protected_branches: env.deployment_branch_policy.protected_branches,
                      custom_branch_policies: env.deployment_branch_policy.custom_branch_policies,
                    }
                  })
                }
              }
            }

      - name: Migrate environment secrets
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const response = ${{ steps.get-envs.outputs.result }};
      
            for (const env of response.environments) {
              const repoID = await github.rest.repos.get({
                owner: 'liatrio-enterprise',
                repo: 'environment-migration-test',
              });
              console.log(repoID.data.id);

              const secretsResponse = await github.rest.actions.listEnvironmentSecrets({
                repository_id: repoID.data.id,
                environment_name: env.name
              });

              console.log(JSON.stringify(secretsResponse));
              console.log(secretsResponse.data.secrets);
      
              for (const secret of secretsResponse.data.secrets) {
                console.log(secret.name);
                // Get the value of the secret
                const secretValue = await github.rest.actions.getEnvironmentSecret({
                  repository_id: repoID.data.id,
                  environment_name: env.name,
                  secret_name: secret.name,
                });

                console.log(secretValue.data);
      
                // Migrate the secret to the target repository
                //await github.rest.actions.createOrUpdateEnvironmentSecret({
                //  owner: 'liatrio-enterprise',
                //  repo: 'calvin-test',
                //  environment_name: env.name,
                //  secret_name: secret.name,
                //  encrypted_value: secretValue.data.encrypted_value,
                //  key_id: secretValue.data.key_id,
                //});
              }
            }       
